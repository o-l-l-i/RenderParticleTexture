// By Olli S.

#pragma kernel GPU_Render

Texture2D<float4> GradientTexture;
RWTexture2D<float4> ResultTexture;


SamplerState _LinearClamp;


uniform uint _ShapeID;

#define PI  3.14159265359
#define PI2 6.28318530718


// DISTANCE FUNCTIONS ---------------------------------------------------------

float Circle(float2 uv)
{
    return distance(uv, float2(.5,.5)) * 2;
}


float Rect(float2 uv)
{
    uv = (uv - 0.5) * 2.1;
    float2 r = abs(uv.xy);
    return max(r.x, r.y);
}


float SoftRect(float2 uv)
{
    uv = abs((uv - 0.5) * 4.0) * 2.0;
    float smooth = 0.8;
    float r = length(max(uv.xy - smooth, 0.0)) * 0.33;
    return r;
}


float Ngon(float2 uv, uint sides, float scale)
{
    uv = (uv - 0.5) * scale;
    uint n = sides;
    float a = atan2(uv.x, uv.y) + PI;
    float r = PI2 / float(n);
    return cos(floor(0.5 + a / r) * r - a) * length(uv);
}


float Tri(float2 uv)
{
    return Ngon(uv, 3, 3.5);
}


float Pentagon(float2 uv)
{
    return Ngon(uv, 5, 2.5);
}


float Hexagon(float2 uv)
{
    return Ngon(uv, 6, 2.5);
}


float Heptagon(float2 uv)
{
    return Ngon(uv, 7, 2.5);
}


float Octagon(float2 uv)
{
    return Ngon(uv, 8, 2.5);
}


float Flower(float2 uv)
{
    uv = (uv - 0.5);
    float r = length(uv) * 6.0;
    float a = atan2(uv.y, uv.x);
    float f = sin(a * 3.0);
    return smoothstep(f, f + 2, r);
}


float Blob(float2 uv)
{
    uv = (uv - 0.5);
    float r = length(uv) * 8;
    float a = atan2(uv.y, uv.x);
    float f = sin(a * 3);
    return smoothstep(sin(r), f + 7, r) * 2.5;
}


float Star(float2 uv)
{
    uv = (uv - 0.5);
    float r = length(uv) * 8;
    float a = atan2(uv.x, uv.y);
    float f = cos(a * 5.0);
    return smoothstep(0.5, f + 5, r) * 2;
}


float Blade(float2 uv)
{
    uv = (uv - 0.5) * 3;
    uint n = 6;
    float a = atan2(uv.x, uv.y);
    float r = PI2 / float(n);
    return cos(floor(0.15 + a / r) * r - a) * length(uv);
}


float Rhombus(float2 uv)
{
    uv = (uv - 0.5) * 2.5;
    uv.y *= 1.5;
    float _angle = radians(45);

    float2x2 rotationMatrix = {
        cos(_angle),-sin(_angle),
        sin(_angle),cos(_angle)
    };
    uv.xy = mul( uv.xy, rotationMatrix );

    float2 r = abs(uv.xy);
    return max(r.x, r.y);
}



// RENDERING PROGRAM ----------------------------------------------------------
[numthreads(8,8,1)]
void GPU_Render (uint3 id : SV_DispatchThreadID)
{

    float xDim;
    float yDim;
    ResultTexture.GetDimensions(xDim, yDim);

    float2 uv = float2((float)id.x / xDim, (float)id.y / yDim);

    float shape = 0;

    [branch] switch(_ShapeID)
    {
        default:
            shape = Circle(uv.xy);
            break;
        case 1:
            shape = Tri(uv.xy);
            break;
        case 2:
            shape = Rect(uv.xy);
            break;
        case 3:
            shape = Pentagon(uv.xy);
            break;
        case 4:
            shape = Hexagon(uv.xy);
            break;
        case 5:
            shape = Heptagon(uv.xy);
            break;
        case 6:
            shape = Octagon(uv.xy);
            break;
        case 7:
            shape = Flower(uv.xy);
            break;
        case 8:
            shape = Blob(uv.xy);
            break;
        case 9:
            shape = Star(uv.xy);
            break;
        case 10:
            shape = SoftRect(uv.xy);
            break;
        case 11:
            shape = Blade(uv.xy);
            break;
        case 12:
            shape = Rhombus(uv.xy);
            break;
    }

    float2 gradUV = float2(shape, 0.5);

    float4 gradColor = GradientTexture.SampleLevel(_LinearClamp, gradUV, 0);

    gradColor = saturate(gradColor);

    ResultTexture [ id.xy ] = gradColor;
}